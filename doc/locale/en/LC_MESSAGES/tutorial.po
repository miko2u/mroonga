# English translations for Mroonga package.
# Copyright (C) 2009-2014, Mroonga Project
# This file is distributed under the same license as the Mroonga package.
# Kouhei Sutou <kou@clear-code.com>, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Mroonga 4.03\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-30 13:00+0900\n"
"PO-Revision-Date: 2014-05-30 13:01+0900\n"
"Last-Translator: Kouhei Sutou <kou@clear-code.com>\n"
"Language-Team: English\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Tutorial"
msgstr "Tutorial"

msgid ""
"If you don't install Mroonga yet, see :doc:`install`. It describes how to "
"install Mroonga."
msgstr ""
"If you don't install Mroonga yet, see :doc:`install`. It describes how to "
"install Mroonga."

msgid ""
"Try the following tutorials after you install Mroonga. You will understand "
"how to use Mroonga."
msgstr ""
"Try the following tutorials after you install Mroonga. You will understand "
"how to use Mroonga."

msgid "Installation check"
msgstr "Installation check"

msgid ""
"It is better that you check Mroonga installation before you use Mroonga. If "
"Mroonga installation is failed, the SQLs in this tutorial will fail."
msgstr ""
"It is better that you check Mroonga installation before you use Mroonga. If "
"Mroonga installation is failed, the SQLs in this tutorial will fail."

msgid "The way to start or stop MySQL server is just same as the normal MySQL."
msgstr ""
"The way to start or stop MySQL server is just same as the normal MySQL."

msgid ""
"After invoking the MySQL server, connect to it by mysql command. If you set "
"password, you need to add '-p' option. ::"
msgstr ""
"After invoking the MySQL server, connect to it by mysql command. If you set "
"password, you need to add '-p' option. ::"

msgid ""
"By using SHOW ENGINES command, you can check if mroonga is installed. ::"
msgstr ""
"By using SHOW ENGINES command, you can check if mroonga is installed. ::"

msgid ""
"If you see \"mroonga\" storage engine like above, the installation is well "
"done."
msgstr ""
"If you see \"mroonga\" storage engine like above, the installation is well "
"done."

msgid "If not installed, invoke INSTALL PLUGIN command like below. ::"
msgstr "If not installed, invoke INSTALL PLUGIN command like below. ::"

msgid "Mode"
msgstr "Mode"

msgid "Mroonga has the following two modes."
msgstr "Mroonga has the following two modes."

msgid "storage mode"
msgstr "storage mode"

msgid "wrapper mode"
msgstr "wrapper mode"

msgid ""
"With the storage mode, we use Groonga for both of the full text search "
"function and the data storage. Since all functions of storage engine are "
"realised with Groonga, aggregations are fast, that is one of Groonga's "
"advantages, and you can manage the database directly by ``groonga`` command."
msgstr ""
"With the storage mode, we use Groonga for both of the full text search "
"function and the data storage. Since all functions of storage engine are "
"realised with Groonga, aggregations are fast, that is one of Groonga's "
"advantages, and you can manage the database directly by ``groonga`` command."

msgid ""
"The structure of the storage mode is the following. You use it instead of "
"existing storage engines like MyISAM or InnoDB"
msgstr ""
"The structure of the storage mode is the following. You use it instead of "
"existing storage engines like MyISAM or InnoDB"

msgid ""
"With the wrapper mode, Groonga is used for full text search function only, "
"and another existing storage engine like InnoDB is used for storing data. By "
"using wrapper mode, you combine InnoDB that is well-use as the storage "
"engine and Mroonga that is a proven full text search engine, and you can use "
"it as the stable database having the fast full text search function."
msgstr ""
"With the wrapper mode, Groonga is used for full text search function only, "
"and another existing storage engine like InnoDB is used for storing data. By "
"using wrapper mode, you combine InnoDB that is well-use as the storage "
"engine and Mroonga that is a proven full text search engine, and you can use "
"it as the stable database having the fast full text search function."

msgid ""
"The structure of the wrapper mode is the following. Full text search related "
"operations are done by Mroonga, and other operations are done by existing "
"storage engines like MyISAM, InnoDB etc. Mroonga is located between SQL "
"Handler that processes SQL and an existing storage engine, thus all data "
"goes through Mroonga With this way, full text search indexing etc. are done "
"transparently."
msgstr ""
"The structure of the wrapper mode is the following. Full text search related "
"operations are done by Mroonga, and other operations are done by existing "
"storage engines like MyISAM, InnoDB etc. Mroonga is located between SQL "
"Handler that processes SQL and an existing storage engine, thus all data "
"goes through Mroonga With this way, full text search indexing etc. are done "
"transparently."

msgid "Storage mode"
msgstr "Storage mode"

msgid "Here we explain how to use storage mode of Mroonga"
msgstr "Here we explain how to use storage mode of Mroonga"

msgid "How to use full text search"
msgstr "How to use full text search"

msgid ""
"After confirming the installation, let's create a table. The important point "
"is to specify mroonga by ``ENGINE = mroonga``. ::"
msgstr ""
"After confirming the installation, let's create a table. The important point "
"is to specify mroonga by ``ENGINE = mroonga``. ::"

msgid "We put data by INSERT. ::"
msgstr "We put data by INSERT. ::"

msgid "Try full text search. ::"
msgstr "Try full text search. ::"

msgid "Yes, full text search works."
msgstr "Yes, full text search works."

msgid "How to get search score"
msgstr "How to get search score"

msgid ""
"In version 1.0.0 or before, Mroonga used a special column named ``_score`` "
"to get search score. From version 1.0.0, it follows MySQL's standard way to "
"get search score."
msgstr ""
"In version 1.0.0 or before, Mroonga used a special column named ``_score`` "
"to get search score. From version 1.0.0, it follows MySQL's standard way to "
"get search score."

msgid ""
"We often want to display more relevant results first in full text search. We "
"use search score in such case."
msgstr ""
"We often want to display more relevant results first in full text search. We "
"use search score in such case."

msgid ""
"We can get search score by MySQL's standard way [#score]_, i.e. we use "
"MATCH...AGAINST in one of columns in SELECT or ORDER BY."
msgstr ""
"We can get search score by MySQL's standard way [#score]_, i.e. we use "
"MATCH...AGAINST in one of columns in SELECT or ORDER BY."

msgid "Let's try. ::"
msgstr "Let's try. ::"

msgid ""
"The result having the search word ``fine`` more, i.e. ``id = 3`` message "
"having the higher search score, is displayed first. And you also get search "
"score by using MATCH AGAINST in SELECT phrase."
msgstr ""
"The result having the search word ``fine`` more, i.e. ``id = 3`` message "
"having the higher search score, is displayed first. And you also get search "
"score by using MATCH AGAINST in SELECT phrase."

msgid "You can use ``AS`` to change the attribute name. ::"
msgstr "You can use ``AS`` to change the attribute name. ::"

msgid "How to specify the parser for full text search"
msgstr "How to specify the parser for full text search"

msgid ""
"MySQL has the following syntax to specify the parser [#parser]_ for full "
"text search. ::"
msgstr ""
"MySQL has the following syntax to specify the parser [#parser]_ for full "
"text search. ::"

msgid ""
"To use this syntax, you need to register all parsers in MySQL beforehand. On "
"the other hand, Groonga can dynamically add a tokeniser, that is a parser in "
"MySQL. So if use this syntax in Mroonga, tokenisers that are added in "
"Groonga dynamically cannot be supported. We think that this limitation "
"decreases the convenience, and we choose our own syntax using COMMENT like "
"the following. ::"
msgstr ""
"To use this syntax, you need to register all parsers in MySQL beforehand. On "
"the other hand, Groonga can dynamically add a tokeniser, that is a parser in "
"MySQL. So if use this syntax in Mroonga, tokenisers that are added in "
"Groonga dynamically cannot be supported. We think that this limitation "
"decreases the convenience, and we choose our own syntax using COMMENT like "
"the following. ::"

msgid ""
"``COMMENT`` in ``FULLTEXT INDEX`` is only supported MySQL 5.5 or later. If "
"you use MySQL 5.1, use ``mroonga_default_parser`` variable described below."
msgstr ""
"``COMMENT`` in ``FULLTEXT INDEX`` is only supported MySQL 5.5 or later. If "
"you use MySQL 5.1, use ``mroonga_default_parser`` variable described below."

msgid "You can specify one of following values as the parser."
msgstr "You can specify one of following values as the parser."

msgid "off"
msgstr "off"

msgid ""
"It does not tokenize at all. Use \"off\" if you want to treat ``content`` as "
"is. For example, this value is used for prefix search."
msgstr ""
"It does not tokenize at all. Use \"off\" if you want to treat ``content`` as "
"is. For example, this value is used for prefix search."

msgid "TokenBigram"
msgstr "TokenBigram"

msgid ""
"It tokenises in bigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 3 letters or more. It is "
"to reduce noises."
msgstr ""
"It tokenises in bigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 3 letters or more. It is "
"to reduce noises."

msgid "This is the default value."
msgstr "This is the default value."

msgid "TokenMecab"
msgstr "TokenMecab"

msgid "It tokenises using MeCab. Groonga should be built with MeCab support."
msgstr "It tokenises using MeCab. Groonga should be built with MeCab support."

msgid "TokenBigramSplitSymbol"
msgstr "TokenBigramSplitSymbol"

msgid ""
"It tokenises in bigram. Unlike TokenBigram, continuous symbols are not "
"treated as a token, but tokenised in bigram."
msgstr ""
"It tokenises in bigram. Unlike TokenBigram, continuous symbols are not "
"treated as a token, but tokenised in bigram."

msgid ""
"When you use TokenBigramSplitSymbol instead of TokenBigram, \"!?\" can match "
"\"!?!?!?\" in \"Is it really!?!?!?\". But when you use TokenBigram, only "
"\"!?!?!?\" can match as well."
msgstr ""
"When you use TokenBigramSplitSymbol instead of TokenBigram, \"!?\" can match "
"\"!?!?!?\" in \"Is it really!?!?!?\". But when you use TokenBigram, only "
"\"!?!?!?\" can match as well."

msgid "TokenBigramSplitSymbolAlpha"
msgstr "TokenBigramSplitSymbolAlpha"

msgid ""
"It tokenise in bigram. In addition to TokenBigramSplitSymbol, continuous "
"alphabets are not treated as a token either, but tokenised in bigram."
msgstr ""
"It tokenise in bigram. In addition to TokenBigramSplitSymbol, continuous "
"alphabets are not treated as a token either, but tokenised in bigram."

msgid ""
"When you use TokenBigramSplitSymbolAlpha instead of TokenBigram, \"real\" "
"can match \"Is it really?\". But when you use TokenBigram, only \"really\" "
"can match as well."
msgstr ""
"When you use TokenBigramSplitSymbolAlpha instead of TokenBigram, \"real\" "
"can match \"Is it really?\". But when you use TokenBigram, only \"really\" "
"can match as well."

msgid "TokenBigramSplitSymbolAlphaDigit"
msgstr "TokenBigramSplitSymbolAlphaDigit"

msgid ""
"It tokenise in bigram. In addition to TokenBigramSplitSymbolAlpha, "
"continuous numbers are not treated as a token either, but tokenised in "
"bigram. So any kind of characters are treated equally in bigram."
msgstr ""
"It tokenise in bigram. In addition to TokenBigramSplitSymbolAlpha, "
"continuous numbers are not treated as a token either, but tokenised in "
"bigram. So any kind of characters are treated equally in bigram."

msgid ""
"When you use TokenBigramSplitSymbolAlphaDigit instead of TokenBigram, "
"\"567\" can match \"090-0123-4567\". But when you use TokenBigram, only "
"\"4567\" can match as well."
msgstr ""
"When you use TokenBigramSplitSymbolAlphaDigit instead of TokenBigram, "
"\"567\" can match \"090-0123-4567\". But when you use TokenBigram, only "
"\"4567\" can match as well."

msgid "TokenBigramIgnoreBlank"
msgstr "TokenBigramIgnoreBlank"

msgid "It tokenise in bigram. Unlike TokenBigram, it ignores white spaces."
msgstr "It tokenise in bigram. Unlike TokenBigram, it ignores white spaces."

msgid ""
"When you use TokenBigramIgnoreBlank instead of TokenBigram, \"みなさん\" can "
"match \"み な さ ん 注 目\". But when you use TokenBigram, only \"み な さ ん"
"\" can match as well."
msgstr ""
"When you use TokenBigramIgnoreBlank instead of TokenBigram, \"みなさん\" can "
"match \"み な さ ん 注 目\". But when you use TokenBigram, only \"み な さ ん"
"\" can match as well."

msgid "TokenBigramIgnoreBlankSplitSymbol"
msgstr "TokenBigramIgnoreBlankSplitSymbol"

msgid ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbol, it ignores white "
"spaces."
msgstr ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbol, it ignores white "
"spaces."

msgid ""
"When you use TokenBigramIgnoreBlankSplitSymbol instead of "
"TokenBigramSplitSymbol, \"???\" can match \"! ? ???\". But when you use "
"TokenBigramSplitSymbol, only \"? ??\" can match as well."
msgstr ""
"When you use TokenBigramIgnoreBlankSplitSymbol instead of "
"TokenBigramSplitSymbol, \"???\" can match \"! ? ???\". But when you use "
"TokenBigramSplitSymbol, only \"? ??\" can match as well."

msgid "TokenBigramIgnoreBlankSplitSymbolAlpha"
msgstr "TokenBigramIgnoreBlankSplitSymbolAlpha"

msgid ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbolAlpha, it ignores white "
"spaces."
msgstr ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbolAlpha, it ignores white "
"spaces."

msgid ""
"When you use TokenBigramIgnoreBlankSplitSymbolAlpha instead of "
"TokenBigramSplitSymbolAlpha, \"ama\" can match \"I am a pen.\". But when you "
"use TokenBigramSplitSymbolAlpha, only \"am a\" can match as well."
msgstr ""
"When you use TokenBigramIgnoreBlankSplitSymbolAlpha instead of "
"TokenBigramSplitSymbolAlpha, \"ama\" can match \"I am a pen.\". But when you "
"use TokenBigramSplitSymbolAlpha, only \"am a\" can match as well."

msgid "TokenBigramIgnoreBlankSplitSymbolAlphaDigit"
msgstr "TokenBigramIgnoreBlankSplitSymbolAlphaDigit"

msgid ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbolAlphaDigit, it ignores "
"white spaces."
msgstr ""
"It tokenise in bigram. Unlike TokenBigramSplitSymbolAlphaDigit, it ignores "
"white spaces."

msgid ""
"When you use TokenBigramIgnoreBlankSplitSymbolAlphaDigit instead of "
"TokenBigramSplitSymbolAlphaDigit, \"9001\" can match \"090 0123 4567\". But "
"when you use TokenBigramSplitSymbolAlphaDigit, only \"90 01\" can match as "
"well."
msgstr ""
"When you use TokenBigramIgnoreBlankSplitSymbolAlphaDigit instead of "
"TokenBigramSplitSymbolAlphaDigit, \"9001\" can match \"090 0123 4567\". But "
"when you use TokenBigramSplitSymbolAlphaDigit, only \"90 01\" can match as "
"well."

msgid "TokenDelimit"
msgstr "TokenDelimit"

msgid "It tokenise by splitting with a white space."
msgstr "It tokenise by splitting with a white space."

msgid ""
"\"movie horror topic\" will be tokenised as \"movie\", \"horror\", \"topic\"."
msgstr ""
"\"movie horror topic\" will be tokenised as \"movie\", \"horror\", \"topic\"."

msgid "TokenDelimitNull"
msgstr "TokenDelimitNull"

msgid "It tokenise by splitting with a null character (\\\\0)."
msgstr "It tokenise by splitting with a null character (\\\\0)."

msgid ""
"\"movie\\\\0horror\\\\0topic\" will be tokenised as \"movie\", \"horror\", "
"\"topic\"."
msgstr ""
"\"movie\\\\0horror\\\\0topic\" will be tokenised as \"movie\", \"horror\", "
"\"topic\"."

msgid "TokenUnigram"
msgstr "TokenUnigram"

msgid ""
"It tokenises in unigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 2 letters or more. It is "
"to reduce noises."
msgstr ""
"It tokenises in unigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 2 letters or more. It is "
"to reduce noises."

msgid "TokenTrigram"
msgstr "TokenTrigram"

msgid ""
"It tokenises in trigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 4 letters or more. It is "
"to reduce noises."
msgstr ""
"It tokenises in trigram. But continuous alphabets, numbers or symbols are "
"treated as a token. So there can exist tokes with 4 letters or more. It is "
"to reduce noises."

msgid ""
"You can specify the default parser by passing ``--with-default-parser`` "
"option in ``configure`` when you build mroonga ::"
msgstr ""
"You can specify the default parser by passing ``--with-default-parser`` "
"option in ``configure`` when you build mroonga ::"

msgid ""
"Or you can set ``mroonga_default_parser`` variable in my.cnf or by SQL. If "
"you specify it in my.cnf, the change will not be lost after restarting "
"MySQL, but you need to restart MySQL to make it effective. On the other "
"hand, if you set it in SQL, the change is effective immediately, but it will "
"be lost when you restart MySQL."
msgstr ""
"Or you can set ``mroonga_default_parser`` variable in my.cnf or by SQL. If "
"you specify it in my.cnf, the change will not be lost after restarting "
"MySQL, but you need to restart MySQL to make it effective. On the other "
"hand, if you set it in SQL, the change is effective immediately, but it will "
"be lost when you restart MySQL."

msgid "my.cnf::"
msgstr "my.cnf::"

msgid "SQL::"
msgstr "SQL::"

msgid "How to use geolocation search"
msgstr "How to use geolocation search"

msgid ""
"In storage mode, you can use fast geolocation search in addition to full "
"text search. But unlike MyISAM, you can only store POINT type data. You "
"cannot store other types data like LINE. And fast search using index only "
"supports MBRContains. It does not support MBRDisjoint."
msgstr ""
"In storage mode, you can use fast geolocation search in addition to full "
"text search. But unlike MyISAM, you can only store POINT type data. You "
"cannot store other types data like LINE. And fast search using index only "
"supports MBRContains. It does not support MBRDisjoint."

msgid ""
"For the table definition for geolocation search, you need to define a POINT "
"type column like in MyISAM and define SPATIAL INDEX for it. ::"
msgstr ""
"For the table definition for geolocation search, you need to define a POINT "
"type column like in MyISAM and define SPATIAL INDEX for it. ::"

msgid ""
"To store data, you create POINT type data by using geomFromText() function "
"like in MyISAM. ::"
msgstr ""
"To store data, you create POINT type data by using geomFromText() function "
"like in MyISAM. ::"

msgid ""
"If you want to find shops within the rectangle where Ikebukuro station "
"(139.7101 35.7292) is the top-left point and Tokyo Station (139.7662 "
"35.6815) is the bottom-right point, SELECT phrase is like the following. ::"
msgstr ""
"If you want to find shops within the rectangle where Ikebukuro station "
"(139.7101 35.7292) is the top-left point and Tokyo Station (139.7662 "
"35.6815) is the bottom-right point, SELECT phrase is like the following. ::"

msgid "Here you can search by geolocation!"
msgstr "Here you can search by geolocation!"

msgid "How to get the record ID"
msgstr "How to get the record ID"

msgid ""
"Groonga assigns a unique number to identify the record when a record is "
"added in the table."
msgstr ""
"Groonga assigns a unique number to identify the record when a record is "
"added in the table."

msgid ""
"To make the development of applications easier, you can get this record ID "
"by SQL in Mroonga"
msgstr ""
"To make the development of applications easier, you can get this record ID "
"by SQL in Mroonga"

msgid ""
"To get the record ID, you need to create a column named ``_id`` when you "
"create a table. ::"
msgstr ""
"To get the record ID, you need to create a column named ``_id`` when you "
"create a table. ::"

msgid ""
"Tye typo of _id column should be integer one (TINYINT, SMALLINT, MEDIUMINT, "
"INT or BIGINT)."
msgstr ""
"Tye typo of _id column should be integer one (TINYINT, SMALLINT, MEDIUMINT, "
"INT or BIGINT)."

msgid "You can create an index for _id column, but it should be HASH type."
msgstr "You can create an index for _id column, but it should be HASH type."

msgid ""
"Let's add records in the table by INSERT. Since _id column is implemented as "
"a virtual column and its value is assigned by Groonga, you cannot specify "
"the value when updating. So you need to exclude it from setting columns, or "
"you need to use ``null`` as its value. ::"
msgstr ""
"Let's add records in the table by INSERT. Since _id column is implemented as "
"a virtual column and its value is assigned by Groonga, you cannot specify "
"the value when updating. So you need to exclude it from setting columns, or "
"you need to use ``null`` as its value. ::"

msgid "To get the record ID, you invoke SELECT with _id column. ::"
msgstr "To get the record ID, you invoke SELECT with _id column. ::"

msgid ""
"By using last_insert_grn_id function, you can also get the record ID that is "
"assigned by the last INSERT. ::"
msgstr ""
"By using last_insert_grn_id function, you can also get the record ID that is "
"assigned by the last INSERT. ::"

msgid ""
"last_insert_grn_id function is included in Mroonga as a User-Defined "
"Function (UDF), but if you have not yet register it in MySQL by CREATE "
"FUNCTION, you need to invoke the following SQL for defining a function. ::"
msgstr ""
"last_insert_grn_id function is included in Mroonga as a User-Defined "
"Function (UDF), but if you have not yet register it in MySQL by CREATE "
"FUNCTION, you need to invoke the following SQL for defining a function. ::"

msgid ""
"As you can see in the example above, you can get the record ID by _id column "
"or last_insert_grn_id function. It will be useful to use this value in the "
"ensuing SQL queries like UPDATE. ::"
msgstr ""
"As you can see in the example above, you can get the record ID by _id column "
"or last_insert_grn_id function. It will be useful to use this value in the "
"ensuing SQL queries like UPDATE. ::"

msgid "How to get snippet (Keyword in context)"
msgstr "How to get snippet (Keyword in context)"

msgid ""
"Mroonga provides functionality to get keyword in context. It is implemented "
"as 'mroonga_snippet' UDF."
msgstr ""
"Mroonga provides functionality to get keyword in context. It is implemented "
"as 'mroonga_snippet' UDF."

msgid "See :doc:`/reference/udf/mroonga_snippet` about details."
msgstr "See :doc:`/reference/udf/mroonga_snippet` about details."

msgid "How to run groonga command"
msgstr "How to run groonga command"

msgid ""
"In storage mode, mroonga stores all your data into Groonga database. You can "
"access Groonga database by SQL with Mroonga. SQL is very powerful but it is "
"not good for some operations such as faceted search."
msgstr ""
"In storage mode, mroonga stores all your data into Groonga database. You can "
"access Groonga database by SQL with Mroonga. SQL is very powerful but it is "
"not good for some operations such as faceted search."

msgid ""
"Faceted search is popular recently. Many online shopping sites such as "
"amazon.com and ebay.com support faceted search. Faceted search refines the "
"current search by available search parameters before users refine their "
"search. And faceted search shows refined searches. Users just select a "
"refined search. Users benefit from faceted search:"
msgstr ""
"Faceted search is popular recently. Many online shopping sites such as "
"amazon.com and ebay.com support faceted search. Faceted search refines the "
"current search by available search parameters before users refine their "
"search. And faceted search shows refined searches. Users just select a "
"refined search. Users benefit from faceted search:"

msgid ""
"Users don't need to think about how to refine their search. Users just "
"select a showed refined search."
msgstr ""
"Users don't need to think about how to refine their search. Users just "
"select a showed refined search."

msgid ""
"Users don't get boared \"not match\" page. Faceted search showes only "
"refined searches that has one or more matched items."
msgstr ""
"Users don't get boared \"not match\" page. Faceted search showes only "
"refined searches that has one or more matched items."

msgid ""
"Faceted search needs multiple `GROUP BY` operations against searched result "
"set. To do faceted search by SQL, multiple `SELECT` requests are needed. It "
"is not effective."
msgstr ""
"Faceted search needs multiple `GROUP BY` operations against searched result "
"set. To do faceted search by SQL, multiple `SELECT` requests are needed. It "
"is not effective."

msgid ""
"Groonga can do faceted search by only one groonga command. It is effective. "
"Groonga has the `select` command that can search records with faceted "
"search. Faceted search is called as `drilldown` in Groonga. See `Groonga's "
"document <http://groonga.org/docs/reference/commands/select.html>`_ about "
"Groonga's `select` command."
msgstr ""
"Groonga can do faceted search by only one groonga command. It is effective. "
"Groonga has the `select` command that can search records with faceted "
"search. Faceted search is called as `drilldown` in Groonga. See `Groonga's "
"document <http://groonga.org/docs/reference/commands/select.html>`_ about "
"Groonga's `select` command."

msgid ""
"Mroonga provides `mroonga_command()` function. You can run groonga command "
"in SQL by the function. But you should use only `select` command. Other "
"commands that change schema or data may break consistency."
msgstr ""
"Mroonga provides `mroonga_command()` function. You can run groonga command "
"in SQL by the function. But you should use only `select` command. Other "
"commands that change schema or data may break consistency."

msgid "Here is the schema definition for execution examples::"
msgstr "Here is the schema definition for execution examples::"

msgid "Here is the sample data for execution examples::"
msgstr "Here is the sample data for execution examples::"

msgid ""
"Each record has `groonga` or `MySQL` as `tag`. Each record also has `year` "
"and `year_month`. You can use `tag`, `year` and `year_month` as faceted "
"search keys."
msgstr ""
"Each record has `groonga` or `MySQL` as `tag`. Each record also has `year` "
"and `year_month`. You can use `tag`, `year` and `year_month` as faceted "
"search keys."

msgid ""
"Groonga calls faceted search as drilldown. So parameter key in Groonga is `--"
"drilldown`. Groonga returns search result as JSON. So `mroonga_command()` "
"also returns search result as JSON. It is not SQL friendly. You need to "
"parse search result JSON by yourself."
msgstr ""
"Groonga calls faceted search as drilldown. So parameter key in Groonga is `--"
"drilldown`. Groonga returns search result as JSON. So `mroonga_command()` "
"also returns search result as JSON. It is not SQL friendly. You need to "
"parse search result JSON by yourself."

msgid ""
"Here is the example of faceted search by all available faceted search keys "
"(result JSON is pretty printted)::"
msgstr ""
"Here is the example of faceted search by all available faceted search keys "
"(result JSON is pretty printted)::"

msgid ""
"See `Groonga's select command document <http://groonga.org/docs/reference/"
"commands/select.html>`_ for more details."
msgstr ""
"See `Groonga's select command document <http://groonga.org/docs/reference/"
"commands/select.html>`_ for more details."

msgid "Logging"
msgstr "Logging"

msgid "Mroonga outputs the logs by default."
msgstr "Mroonga outputs the logs by default."

msgid ""
"Log files are located in MySQL's data directory with the filename  ``groonga."
"log``."
msgstr ""
"Log files are located in MySQL's data directory with the filename  ``groonga."
"log``."

msgid "Here is the example of the log. ::"
msgstr "Here is the example of the log. ::"

msgid ""
"The default log level is NOTICE, i.e. we have important information only and "
"we don't have debug information etc.)."
msgstr ""
"The default log level is NOTICE, i.e. we have important information only and "
"we don't have debug information etc.)."

msgid ""
"You can get the log level by ``mroonga_log_level`` system variable, that is "
"a global variable. You can also modify it dynamically by using SET phrase. ::"
msgstr ""
"You can get the log level by ``mroonga_log_level`` system variable, that is "
"a global variable. You can also modify it dynamically by using SET phrase. ::"

msgid "Available log levels are the followings."
msgstr "Available log levels are the followings."

msgid "NONE"
msgstr "NONE"

msgid "EMERG"
msgstr "EMERG"

msgid "ALERT"
msgstr "ALERT"

msgid "CRIT"
msgstr "CRIT"

msgid "ERROR"
msgstr "ERROR"

msgid "WARNING"
msgstr "WARNING"

msgid "NOTICE"
msgstr "NOTICE"

msgid "INFO"
msgstr "INFO"

msgid "DEBUG"
msgstr "DEBUG"

msgid "DUMP"
msgstr "DUMP"

msgid "See :ref:`mroonga_log_level` about details."
msgstr "See :ref:`mroonga_log_level` about details."

msgid ""
"You can reopen the log file by FLUSH LOGS. If you want to rotate the log "
"file without stopping MySQL server, you can do in the following procedure."
msgstr ""
"You can reopen the log file by FLUSH LOGS. If you want to rotate the log "
"file without stopping MySQL server, you can do in the following procedure."

msgid ""
"change the file name of ``groonga.log`` (by using OS's mv command etc.)."
msgstr ""
"change the file name of ``groonga.log`` (by using OS's mv command etc.)."

msgid ""
"invoke \"FLUSH LOGS\" in MySQL server (by mysql command or mysqladmin "
"command)."
msgstr ""
"invoke \"FLUSH LOGS\" in MySQL server (by mysql command or mysqladmin "
"command)."

msgid "Choosing appropriate columns"
msgstr "Choosing appropriate columns"

msgid ""
"Groonga uses one file per column to store data, and Mroonga accesses needed "
"columns only when accessing a table to utilise this characteristic."
msgstr ""
"Groonga uses one file per column to store data, and Mroonga accesses needed "
"columns only when accessing a table to utilise this characteristic."

msgid ""
"This optimisation is done automatically in Mroonga internal, you don't need "
"any specific configuration."
msgstr ""
"This optimisation is done automatically in Mroonga internal, you don't need "
"any specific configuration."

msgid "Imagine that we have a table with 20 columns like below. ::"
msgstr "Imagine that we have a table with 20 columns like below. ::"

msgid ""
"When we run SELECT phrase like the following, mroonga reads data from "
"columns that are referred by SELECT phrase and WHERE phrase only (and it "
"does not access columns that not required internally)."
msgstr ""
"When we run SELECT phrase like the following, mroonga reads data from "
"columns that are referred by SELECT phrase and WHERE phrase only (and it "
"does not access columns that not required internally)."

msgid "SELECT c1, c2, c11 FROM t1 WHERE c2 = XX AND c12 = \"XXX\";"
msgstr "SELECT c1, c2, c11 FROM t1 WHERE c2 = XX AND c12 = \"XXX\";"

msgid ""
"In this case above, only columns c1, c2, c11 and c12 are accessed, and we "
"can process the SQL rapidly."
msgstr ""
"In this case above, only columns c1, c2, c11 and c12 are accessed, and we "
"can process the SQL rapidly."

msgid "Optimisation for counting rows"
msgstr "Optimisation for counting rows"

msgid ""
"In MySQL's storage engine interface, there is no difference between counting "
"rows like COUNT(\\*) and normal data retrieving by SELECT. So access to data "
"that is not included in SELECT result can happen even if you just want to "
"count rows."
msgstr ""
"In MySQL's storage engine interface, there is no difference between counting "
"rows like COUNT(\\*) and normal data retrieving by SELECT. So access to data "
"that is not included in SELECT result can happen even if you just want to "
"count rows."

msgid ""
"Tritonn (MySQL + Senna), that is Mroonga's predecessor, introduced \"2ind "
"patch\" to skip needless access to data and solved this performance issue."
msgstr ""
"Tritonn (MySQL + Senna), that is Mroonga's predecessor, introduced \"2ind "
"patch\" to skip needless access to data and solved this performance issue."

msgid "Mroonga also has the optimisation for counting rows."
msgstr "Mroonga also has the optimisation for counting rows."

msgid ""
"In the following SELECT, for example, needless read of columns are skipped "
"and you can get the result of counting rows with the minimal cost."
msgstr ""
"In the following SELECT, for example, needless read of columns are skipped "
"and you can get the result of counting rows with the minimal cost."

msgid "SELECT COUNT(*) FROM t1 WHERE MATCH(c2) AGAINST(\"hoge\");"
msgstr "SELECT COUNT(*) FROM t1 WHERE MATCH(c2) AGAINST(\"hoge\");"

msgid ""
"You can check if this optimisation works or not by the status variable. ::"
msgstr ""
"You can check if this optimisation works or not by the status variable. ::"

msgid ""
"Each time the optimisation for counting rows works, ``Mroonga_count_skip`` "
"status variable value is increased."
msgstr ""
"Each time the optimisation for counting rows works, ``Mroonga_count_skip`` "
"status variable value is increased."

msgid ""
"Note : This optimisation is implemented by using the index. It only works in "
"the case where we records can be specified only by the index."
msgstr ""
"Note : This optimisation is implemented by using the index. It only works in "
"the case where we records can be specified only by the index."

msgid "Optimisation for ORDER BY LIMIT in full text search"
msgstr "Optimisation for ORDER BY LIMIT in full text search"

msgid ""
"Generally speaking, MySQL can process \"ORDER BY\" query with almost no cost "
"if we can get records by index, and can process \"LIMIT\" with low cost by "
"limiting the range of processing data even if the number of query result is "
"very big."
msgstr ""
"Generally speaking, MySQL can process \"ORDER BY\" query with almost no cost "
"if we can get records by index, and can process \"LIMIT\" with low cost by "
"limiting the range of processing data even if the number of query result is "
"very big."

msgid ""
"But for the query where \"ORDER BY\" cannot use index, like sort full text "
"search result by the score and use LIMIT, the processing cost is "
"proportional to the number of query results. So it might take very long time "
"for the keyword query that matches with many records."
msgstr ""
"But for the query where \"ORDER BY\" cannot use index, like sort full text "
"search result by the score and use LIMIT, the processing cost is "
"proportional to the number of query results. So it might take very long time "
"for the keyword query that matches with many records."

msgid ""
"Tritonn took no specific countermeasure for this issue, but it introduced a "
"workaround in the latest repository so that it sorted Senna result in "
"descending order of the score by using sen_records_sort function so that we "
"could remove ORDER BY from the SQL query."
msgstr ""
"Tritonn took no specific countermeasure for this issue, but it introduced a "
"workaround in the latest repository so that it sorted Senna result in "
"descending order of the score by using sen_records_sort function so that we "
"could remove ORDER BY from the SQL query."

msgid "Mroonga also has the optimisation for ORDER BY LIMIT."
msgstr "Mroonga also has the optimisation for ORDER BY LIMIT."

msgid ""
"In the SELECT example below, ORDER BY LIMIT is processed in groonga only and "
"the minimal records are passed to MySQL. ::"
msgstr ""
"In the SELECT example below, ORDER BY LIMIT is processed in groonga only and "
"the minimal records are passed to MySQL. ::"

msgid ""
"Each time the optimisation for counting rows works, "
"``Mroonga_fast_order_limit`` status variable value is increased."
msgstr ""
"Each time the optimisation for counting rows works, "
"``Mroonga_fast_order_limit`` status variable value is increased."

msgid ""
"Note : This optimisation is targeting queries like \"select ... match "
"against order by _score desc limit X, Y\" only, and it works if all of the "
"following conditions are right."
msgstr ""
"Note : This optimisation is targeting queries like \"select ... match "
"against order by _score desc limit X, Y\" only, and it works if all of the "
"following conditions are right."

msgid "WHERE phrase has \"match...against\" only"
msgstr "WHERE phrase has \"match...against\" only"

msgid "no JOIN"
msgstr "no JOIN"

msgid "with LIMIT"
msgstr "with LIMIT"

msgid ""
"ORDER BY phrase has columns (including _id) or \"match...against\" that is "
"used in WHERE phrase only"
msgstr ""
"ORDER BY phrase has columns (including _id) or \"match...against\" that is "
"used in WHERE phrase only"

msgid "Footnotes"
msgstr "Footnotes"

msgid ""
"`MySQL 5.1 Reference Manual :: 11 Functions and Operations :: 11.7 Full-Text "
"Search Functions <http://dev.mysql.com/doc/refman/5.1/ja/fulltext-search."
"html>`_"
msgstr ""
"`MySQL 5.1 Reference Manual :: 11 Functions and Operations :: 11.7 Full-Text "
"Search Functions <http://dev.mysql.com/doc/refman/5.1/ja/fulltext-search."
"html>`_"

msgid "In groonga, we call it a 'tokeniser'."
msgstr "In groonga, we call it a 'tokeniser'."

msgid "Wrapper mode"
msgstr "Wrapper mode"

msgid "Here we explain how to use wrapper mode of Mroonga"
msgstr "Here we explain how to use wrapper mode of Mroonga"

msgid "How to use wrapper mode"
msgstr "How to use wrapper mode"

msgid ""
"In wrapper mode, Mroonga works in wrapping an existing storage engine. To "
"specify the wrapped storage engine, we use SQL comment like ``COMMENT = "
"'engine \"innodb\"'`` for now."
msgstr ""
"In wrapper mode, Mroonga works in wrapping an existing storage engine. To "
"specify the wrapped storage engine, we use SQL comment like ``COMMENT = "
"'engine \"innodb\"'`` for now."

msgid ""
"For now, a primary key is mandatory in wrapper mode. That is not the case "
"with storage mode."
msgstr ""
"For now, a primary key is mandatory in wrapper mode. That is not the case "
"with storage mode."

msgid ""
"Wrapper mode supports the followings, that are not supported in storage mode "
"for now."
msgstr ""
"Wrapper mode supports the followings, that are not supported in storage mode "
"for now."

msgid "null value"
msgstr "null value"

msgid ""
"transaction (if storage engine supports. Note that rollback causes mismatch "
"of indexes, it may affects search results, so recreate index of Mroonga in "
"such a case.)"
msgstr ""
"transaction (if storage engine supports. Note that rollback causes mismatch "
"of indexes, it may affects search results, so recreate index of Mroonga in "
"such a case.)"

msgid ""
"After confirming the installation, let's create a table. The important point "
"is to specify Mroonga by ``ENGINE = mroonga``. ::"
msgstr ""
"After confirming the installation, let's create a table. The important point "
"is to specify Mroonga by ``ENGINE = mroonga``. ::"

msgid ""
"You can specify the default parser by passing ``--with-default-parser`` "
"option in ``configure`` when you build Mroonga. ::"
msgstr ""
"You can specify the default parser by passing ``--with-default-parser`` "
"option in ``configure`` when you build Mroonga. ::"

msgid ""
"In the SELECT example below, ORDER BY LIMIT is processed in Mroonga only and "
"the minimal records are passed to MySQL. ::"
msgstr ""
"In the SELECT example below, ORDER BY LIMIT is processed in Mroonga only and "
"the minimal records are passed to MySQL. ::"

msgid ""
"Each time the optimisation for counting rows works, "
"``mroonga_fast_order_limit`` status variable value is increased."
msgstr ""
"Each time the optimisation for counting rows works, "
"``mroonga_fast_order_limit`` status variable value is increased."

msgid ""
"ORDER BY phrase has _id column or \"match...against\" that is used in WHERE "
"phrase only"
msgstr ""
"ORDER BY phrase has _id column or \"match...against\" that is used in WHERE "
"phrase only"

msgid "In Groonga, we call it a 'tokeniser'."
msgstr "In Groonga, we call it a 'tokeniser'."
